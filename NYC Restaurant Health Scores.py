# -*- coding: utf-8 -*-
"""garcia_gilberto_individualdataproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vtdR9H-JQ2mhiPINaOHGD3_VZCB8NRZs

**Gil Garcia**

Individual Data Project

11/19/21

**1. Import the data**
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline 
import requests
import pandas as pd
import numpy as np

url = 'https://data.cityofnewyork.us/resource/43nn-pn8j.json?$limit=400000'
restdata = requests.get(url).json()

print("This data is from NYC Open Data and more specifically it is from the NYC Department of Health and Mental Hygiene. It contains a row for each of the city's restaurant inspections and the results. The data goes back to June 2009. It is also updated with new inspections on a daily basis.")

"""**2. Begin to look at the data**"""

print(len(restdata))
print(type(restdata))
print(restdata[1])

"""**3. Create a DataFrame**"""

df = pd.DataFrame(restdata)
df

dfmininspectiondate = df[df.inspection_date != '1900-01-01T00:00:00.000']
print(dfmininspectiondate.inspection_date.min())

print("I am interested in undestanding how inspection grades vary by borough in 2021. Therefore my variables of interest, or those that I will keep, are camis, dba, boro, inspection_date, score, and grade.\n\n"
"camis: unique identifier for every restaurant\n"
"dba: restaurant name\n"
"boro: borough in which the restaurant is located\n"
"inspection_date: date on which the inspection was conducted\n"
"score: integer score assigned by the inspector to the restaurant. According to NYC Health, an inspection score of 0 to 13 is an A, 14 to 27 points is a B, and 28 or more points is a C.\n"
"grade: letter grade assigned to the restaurant. Either an A, B, or C")

"""**4. Drop columns not needed**"""

df.columns

df.drop(['building','street','zipcode','phone','cuisine_description','action','violation_code','violation_description','critical_flag','record_date','inspection_type','latitude','longitude','community_board','council_district','census_tract','bin','bbl','nta','grade_date'], axis=1,  inplace=True)
df.columns

df.head(20)

"""**5. Convert inspection_date to datetime type and filter for 2021 inspections**"""

newvalues = pd.to_datetime(df.loc[:, "inspection_date"])
df.loc[:, "inspection_date"] = newvalues
df.dtypes

dfsub = df.loc[df.inspection_date > '2020-12-31'].copy()
print(dfsub.head(10))
print(len(dfsub))
dfsub.dtypes

"""**6. Inspect columns for missing values**"""

counter = 0 
for index, row in dfsub.iterrows(): # Iterate over DataFrame rows as (index, Series) pairs.
    if(pd.isnull(row['dba'])):
       counter = counter + 1
counter

counter = 0 
for index, row in dfsub.iterrows(): # Iterate over DataFrame rows as (index, Series) pairs.
    if(pd.isnull(row['boro'])):
       counter = counter + 1
counter

counter = 0 
for index, row in dfsub.iterrows(): # Iterate over DataFrame rows as (index, Series) pairs.
    if(pd.isnull(row['inspection_date'])):
       counter = counter + 1
counter

counter = 0 
for index, row in dfsub.iterrows(): # Iterate over DataFrame rows as (index, Series) pairs.
    if(pd.isnull(row['score'])):
       counter = counter + 1
counter

counter = 0 
for index, row in dfsub.iterrows(): # Iterate over DataFrame rows as (index, Series) pairs.
    if(pd.isnull(row['grade'])):
       counter = counter + 1
counter

"""**7. Convert columns to appropriate data types**"""

dfsub["camis"] = pd.Categorical(dfsub["camis"])
dfsub["score"] = pd.to_numeric(dfsub["score"], errors='coerce')
dfsub["dba"] = pd.Categorical(dfsub["dba"])
dfsub["boro"] = pd.Categorical(dfsub["boro"])
dfsub["grade"] = pd.Categorical(dfsub["grade"])

dfsub.dtypes

"""**8. Drop rows with missing values in "score" column**"""

dfsub = dfsub.dropna(subset=['score'])
print(dfsub)
counter = 0 
for index, row in dfsub.iterrows(): # Iterate over DataFrame rows as (index, Series) pairs.
    if(pd.isnull(row['score'])):
       counter = counter + 1
print(counter)
dfsub = dfsub[dfsub.boro != "0"]
print(dfsub)   
dfsub.reset_index(inplace=True, drop=True)

"""**9. Check for unique restaurants**"""

dfsub['camis'].nunique() #since this number is less than my number of rows it means I am counting some restaurants twice or more

"""**10. Add a new grade column, "Grade2", by using the scores column to assign a grade. According to NYC Health, an inspection score of 0 to 13 is an A, 14 to 27 points is a B, and 28 or more points is a C.**"""

score = dfsub['score']
scorelist = score.tolist()
type(scorelist)

grade2 = []
for x in scorelist:
  if x <= 13:
    grade2.append("A")
  elif (x >= 14) and (x <= 27):
    grade2.append("B")
  else:
    grade2.append("C")
print(grade2)

dfsub['grade2'] = grade2
print(dfsub)

"""**11. Basic summary statistics using pivot and groupby**"""

pivot = pd.pivot_table(dfsub, 
                       values=['score'], 
                       index=['boro'], # rows
                        aggfunc=np.median) # aggregation function
pivot

dfsub.groupby(['boro', 'grade2']).agg({"grade2": ['count']})

"""**12. Pie chart visualization of data**"""

statenisland = {"gradecount":[410, 261, 176],"grades":["A","B","C"]}
print(statenisland)

import matplotlib.pyplot as plt

fig = plt.figure()

ax = fig.add_subplot(111)

ax.pie(statenisland['gradecount'], labels=statenisland['grades'], autopct='%1.1f%%')
ax.set_title("Staten Island Restaurants 2021 Inspection Grades")
fig.text(x=0, y=0, s='Source: NYC Open Data - Department of Health and Mental Hygiene (2021)', horizontalalignment='left',color='black')

plt.show()